use std::str::FromStr;
use crate::ast::{Program, Stmt, Expr, TypedExpr, Bop, Literal};

grammar;

pub Program: Program = {
    <stmts: (<Stmt>)*> => Program {<>}
}

pub Stmt: Stmt = {
    "print" <Expr> ";" => Stmt::Print(<>)
}

pub Expr: TypedExpr = {
    <e1: Expr> <bop: Bop1> <e2: Factor> => Expr::Bop {<>}.into(),
    Factor,
};

pub Factor: TypedExpr = {
    <e1: Factor> <bop: Bop2> <e2: Term> => Expr::Bop {<>}.into(),
    Term
}

pub Term: TypedExpr = {
    Literal => Expr::Literal(<>).into(),
    "if" <condition: Expr> "{" <then: Expr> "}" "else" "{" <otherwise: Expr> "}" 
         => Expr::If {<>}.into(),
    "(" <Expr> ")"
}

Bop1: Bop = { 
    "+" => Bop::Add,
    "-" => Bop::Sub,
};

Bop2: Bop = { 
    "*" => Bop::Mul,
    "/" => Bop::Div,
};

Literal: Literal = {
    r"[0-9]+" => Literal::Num(i32::from_str(<>).unwrap()),
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false)
};