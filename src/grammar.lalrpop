use std::str::FromStr;
use crate::ast::*;

grammar;

pub Type: Type = {
    "i32" => Type::Int32,
    "bool" => Type::Bool,
    "(" ")" => Type::Unit,
    "&" <t: Type> => Type::Borrow(t.into(), false),
    "&" "mut" <t: Type> => Type::Borrow(t.into(), true)
}

pub Program: Program<BaseExpr> = {
    <items: (<Item>)*> => Program {<>}
}

pub Binding: (Identifier, RcType) = {
    <id: Identifier> ":" <t: Type> => (id, t.into())
}

pub Item: Item<BaseExpr> = {
    "fn" <id:Identifier> "(" <bindings: Comma<Binding>> ")" <ret:("->" <Type>)?> <body:Block> =>
        Item::Function(id, bindings, ret.unwrap_or(Type::Unit).into(),
                       body).into()
}

pub Stmt: Stmt<BaseExpr> = {
    "let" <id: Identifier> "=" <e: Expr> ";" => Stmt::Let(Some(id), e, false),
    "let" "mut" <id: Identifier> "=" <e: Expr> ";" => Stmt::Let(Some(id), e, true),
    <e: Expr> ";" => Stmt::Let(None, e, false)
}

pub Expr: BaseExpr = {
    ExprAssign
}

pub ExprAssign: BaseExpr = {
    <lhs: ExprAssign> "=" <rhs: ExprOr> => Expr::Assign(<>).into(),
    ExprOr
}

pub ExprOr: BaseExpr = {
    <e1: ExprAnd> "||" <e2: ExprOr> => Expr::Or(<>).into(),
    ExprAnd
}

pub ExprAnd: BaseExpr = {
    <e1: ExprCmp> "&&" <e2: ExprAnd> => Expr::And(<>).into(),
    ExprCmp
}

pub ExprCmp: BaseExpr = {
    <e1: ExprBop1> <cmp: Cmp> <e2: ExprCmp> => Expr::Cmp {<>}.into(),
    ExprBop1
}

pub ExprBop1: BaseExpr = {
    <e1: ExprBop2> <bop: Bop1> <e2: ExprBop1> => Expr::Bop {<>}.into(),
    ExprBop2
};

pub ExprBop2: BaseExpr = {
    <e1: ExprUnary> <bop: Bop2> <e2: ExprBop2> => Expr::Bop {<>}.into(),
    ExprUnary
}

pub ExprUnary: BaseExpr = {
    "!" <ExprUnary> => Expr::Not(<>).into(),
    "&" <ExprUnary> => Expr::Borrow(<>, false).into(),
    "&" "mut" <ExprUnary> => Expr::Borrow(<>, true).into(),
    "&&" <ExprUnary> => Expr::Borrow(Expr::Borrow(<>, false).into(), false).into(),
    "&&" "mut" <ExprUnary> => Expr::Borrow(Expr::Borrow(<>, true).into(), false).into(),
    "*" <ExprUnary> => Expr::Deref(<>).into(),
    Term
}

pub Term: BaseExpr = {
    Literal => Expr::Literal(<>).into(),
    "if" <condition: Expr> <then:Block> "else" <otherwise:Block>
        => Expr::If {<>}.into(),
    "while" <condition:Expr> <body:Block> => Expr::While {<>}.into(),
    "print" "(" <Expr> ")" => Expr::Print(<>).into(), 
    // funcalls
    //<name:Term> "(" ")" => Expr::Funcall(name, vec![]).into(),
    <Term> "(" <Comma<Expr>> ")" => Expr::FunCall(<>).into(),
    "(" <Expr> ")",
    Identifier => Expr::Var(<>).into(),
    Block,
    
}

pub Block: BaseExpr = {
    "{" <Stmt*> "}" => Expr::Block(<>, Expr::Literal(Literal::Unit).into()).into(),
    "{" <Stmt*> <Expr> "}" => Expr::Block(<>).into()
}

Bop1: Bop = { 
    "+" => Bop::Add,
    "-" => Bop::Sub,
};

Bop2: Bop = { 
    "*" => Bop::Mul,
    "/" => Bop::Div,
};

Cmp: Cmp = {
    "==" => Cmp::Eq,
    "!=" => Cmp::Neq,
    "<" => Cmp::Lt,
    "<=" => Cmp::Le,
    ">" => Cmp::Gt,
    ">=" => Cmp::Ge,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Literal: Literal = {
    r"[0-9]+" => Literal::Num(i32::from_str(<>).unwrap()),
    "(" ")" => Literal::Unit,
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false)
};

Identifier: Identifier = {
    r"[a-zA-Z_]+[a-zA-Z0-9_]*" => Identifier::Identifier(<>.to_string())
}
